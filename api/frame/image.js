// Vercel API endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

export default async function handler(req, res) {
  try {
    const { state } = req.query;
    
    let gameState = null;
    if (state) {
      try {
        gameState = JSON.parse(decodeURIComponent(state));
      } catch (e) {
        console.error('Invalid game state:', e);
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    const svg = generateGameBoardSVG(gameState);
    
    res.setHeader('Content-Type', 'image/svg+xml');
    res.setHeader('Cache-Control', 'public, max-age=30');
    
    return res.status(200).send(svg);
    
  } catch (error) {
    console.error('Image generation error:', error);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
    const errorSvg = generateErrorSVG();
    res.setHeader('Content-Type', 'image/svg+xml');
    return res.status(500).send(errorSvg);
  }
}

function generateGameBoardSVG(gameState) {
  const width = 600;
  const height = 700;
  const cellSize = 160;
  const startX = (width - cellSize * 3) / 2;
  const startY = 100;
  
  let board = Array(9).fill(null);
  let currentPlayer = 'X';
  let status = '–ù–æ–≤–∞—è –∏–≥—Ä–∞ - –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"';
  
  if (gameState) {
    board = gameState.board || board;
    currentPlayer = gameState.currentPlayer || currentPlayer;
    
    if (gameState.finished) {
      if (gameState.winner) {
        status = `üéâ –ü–æ–±–µ–¥–∏–ª ${gameState.winner}! –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"`;
      } else {
        status = 'ü§ù –ù–∏—á—å—è! –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"';
      }
    } else {
      status = `–•–æ–¥ –∏–≥—Ä–æ–∫–∞ ${currentPlayer} - –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é (1-9)`;
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SVG
  let svg = `
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .bg { fill: #1a1a2e; }
      .text { fill: #ffffff; font-family: Arial, sans-serif; }
      .title { font-size: 32px; font-weight: bold; }
      .status { font-size: 18px; }
      .cell { fill: #16213e; stroke: #0f3460; stroke-width: 3; }
      .cell-text { font-size: 80px; font-weight: bold; text-anchor: middle; dominant-baseline: central; }
      .x { fill: #e94560; }
      .o { fill: #0f3460; }
      .number { font-size: 24px; fill: #666; text-anchor: middle; dominant-baseline: central; }
    </style>
  </defs>
  
  <!-- –§–æ–Ω -->
  <rect width="${width}" height="${height}" class="bg"/>
  
  <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
  <text x="${width/2}" y="50" class="text title" text-anchor="middle">TicTacToe Farcaster</text>
  
  <!-- –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã -->
  <text x="${width/2}" y="${startY - 30}" class="text status" text-anchor="middle">${status}</text>`;

  // –†–∏—Å—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  for (let i = 0; i < 9; i++) {
    const row = Math.floor(i / 3);
    const col = i % 3;
    const x = startX + col * cellSize;
    const y = startY + row * cellSize;
    
    // –ö–ª–µ—Ç–∫–∞
    svg += `
  <rect x="${x}" y="${y}" width="${cellSize}" height="${cellSize}" class="cell"/>`;
    
    // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª–µ—Ç–∫–∏
    if (board[i]) {
      svg += `
  <text x="${x + cellSize/2}" y="${y + cellSize/2}" class="cell-text ${board[i].toLowerCase()}">${board[i]}</text>`;
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
      svg += `
  <text x="${x + cellSize/2}" y="${y + cellSize/2}" class="number">${i + 1}</text>`;
    }
  }
  
  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  svg += `
  <text x="${width/2}" y="${startY + cellSize * 3 + 50}" class="text status" text-anchor="middle">
    ${gameState && !gameState.finished ? '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (1-9) –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É' : ''}
  </text>
  
  <!-- –õ–æ–≥–æ—Ç–∏–ø/–ø–æ–¥–ø–∏—Å—å -->
  <text x="${width/2}" y="${height - 30}" class="text" text-anchor="middle" style="font-size: 14px; fill: #666;">
    Powered by vebster88 | Farcaster Frame
  </text>
</svg>`;

  return svg;
}

function generateErrorSVG() {
  return `
<svg width="600" height="400" xmlns="http://www.w3.org/2000/svg">
  <rect width="600" height="400" fill="#1a1a2e"/>
  <text x="300" y="200" fill="#e94560" font-family="Arial" font-size="24" text-anchor="middle">
    –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã
  </text>
  <text x="300" y="240" fill="#ffffff" font-family="Arial" font-size="16" text-anchor="middle">
    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
  </text>
</svg>`;
}
