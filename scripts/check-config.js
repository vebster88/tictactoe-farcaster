#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Farcaster API
import { config } from 'dotenv';
import axios from 'axios';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local, –∑–∞—Ç–µ–º .env
config({ path: '.env.local' });
config();

const NEYNAR_API_KEY = process.env.VITE_NEYNAR_API_KEY;
const VITE_FARCASTER_MOCK = process.env.VITE_FARCASTER_MOCK;

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Farcaster API...\n');

console.log('üìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log(`  NEYNAR_API_KEY: ${NEYNAR_API_KEY ? '***' + NEYNAR_API_KEY.slice(-4) : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
console.log(`  VITE_FARCASTER_MOCK: ${VITE_FARCASTER_MOCK || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);

if (!NEYNAR_API_KEY || NEYNAR_API_KEY === 'your_neynar_api_key_here') {
  console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞: API –∫–ª—é—á Neynar –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
  console.log('üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:');
  console.log('  1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞ https://neynar.com');
  console.log('  2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env.local –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  console.log('  3. –î–æ–±–∞–≤—å—Ç–µ: VITE_NEYNAR_API_KEY=–≤–∞—à_–∫–ª—é—á_–∑–¥–µ—Å—å');
  console.log('  4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
  process.exit(1);
}

if (VITE_FARCASTER_MOCK === 'true') {
  console.log('\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω mock —Ä–µ–∂–∏–º');
  console.log('   –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VITE_FARCASTER_MOCK=false');
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API
console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...');
try {
  const response = await axios.get('https://api.neynar.com/v2/farcaster/user/bulk-by-address', {
    params: { addresses: '0x0000000000000000000000000000000000000000' },
    headers: { 'api_key': NEYNAR_API_KEY }
  });
  
  console.log('‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:');
  if (error.response?.status === 401) {
    console.log('   –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
  } else if (error.response?.status === 403) {
    console.log('   API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É');
  } else {
    console.log(`   ${error.message}`);
  }
  process.exit(1);
}

console.log('\nüéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!');
